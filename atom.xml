<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Binary Musings]]></title>
  <link href="http://Sannidhi.github.io/atom.xml" rel="self"/>
  <link href="http://Sannidhi.github.io/"/>
  <updated>2014-01-28T23:53:39-08:00</updated>
  <id>http://Sannidhi.github.io/</id>
  <author>
    <name><![CDATA[Sannidhi]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Developer Resolutions for 2013]]></title>
    <link href="http://Sannidhi.github.io/blog/2013/01/28/developer-resolutions-for-2013/"/>
    <updated>2013-01-28T00:00:00-08:00</updated>
    <id>http://Sannidhi.github.io/blog/2013/01/28/developer-resolutions-for-2013</id>
    <content type="html"><![CDATA[<div class='post'>
Thank you Scott for giving me this idea. There are many resolutions I make in my head, but to put them down and try to stick to <a href="http://en.wikipedia.org/wiki/SMART_criteria">SMART</a> as much as possible, is what I am going to try to do this year.<br /><br />So here I go:<br /><div><h3><b>Read 1 technical book every 3 months.</b></h3>For this resolution, I have taken inspiration from the book <a href="http://pragprog.com/the-pragmatic-programmer"> The Pragmatic Programmer</a> where the author gives ideas to developers to stay on top of their knowledge. A technical book could be anything that could improve my skills as a developer or go deeper into the patterns in a language I already know or simply tell me something about an area I&#8217;m totally unaware of.<br /><h3><b>Learn a new language + develop an app using it.</b></h3>My programming has been limited to using languages like Java or C. Though these are pretty strong languages by themselves, knowing more will help me chose the right language to solve a given problem. I want to start with Ruby/Python and then move to core functional languages like F#. To develop an app in it, is to put a measurable aspect to &#8220;learning&#8221; it.<br /><h3><b>Speak at a technical event in ThoughtWorks or outside.</b></h3><div>This resolution will help me target two of my weaknesses:</div><div>1. Fear of public speaking&nbsp;</div><div>2. Laziness to learn something difficult without being thrown into it. &nbsp;</div><h3><b>Write one blog post every month - at least!</b></h3></div><div><div>I started writing this blog when I realized I was learning so many new things and I needed an outlet for them. That in turn, helped me understand the concepts better. If I do not have anything to write about, means that I am not bursting with new ideas or learnings. Hence the pledge to keep writing will be a pledge to keep learning.<br /><br />By the way, hope this one counts as January :)&nbsp;</div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Set Up a Continuous Integration Server]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/11/20/set-up-continuous-integration-server/"/>
    <updated>2012-11-20T00:00:00-08:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/11/20/set-up-continuous-integration-server</id>
    <content type="html"><![CDATA[<div class='post'>
<br />Steps to set up a continuous integration server using&nbsp;<a href="http://www.thoughtworks-studios.com/go-agile-release-management">Go</a>:&nbsp;(Why?&nbsp;<a href="http://mythoughtslam.blogspot.com/2012/11/continuous-integration.html">See this</a>)<br /><br />1. Log in to the machine where you want the continuous server to be hosted<br /><span style="color: #674ea7;">&nbsp; &nbsp; $ ssh root@I.P.Address&nbsp;</span><br />2. Download Go from&nbsp;<a href="http://www.thoughtworks-studios.com/go-agile-release-management/download">here</a>. Install both&nbsp;go server and go agent.<br />3. Start your agent<br /><span style="color: #674ea7;">&nbsp; &nbsp; &nbsp;$ go-agent start&nbsp;</span><br />4. Set up pipelines and stages to get the jobs done.<br /><br />Thats it, your integration server and agent is ready to &#8220;go&#8221; :)<br /><br />There are a couple of assumptions made in the 3 step process for setting it up such as:<br /><br />1. The machine where you are installing the go server already has the resources needed for it to build your code.<br />2. For ex, for the first project, we had a &#8220;mySQL, git, Java 1.6&#8221; stack. Hence we had to ensure that the machine also has the same versions of the softwares installed on them.<br /><br />Configuring the server manually should not be the way to go as you may need to do all these steps again if you are setting it up on some other machine. We can automate this process.<br /><br />A sample script to configure Go on a Cent OS machine:<br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br /># To unzip your downloads<br />yum install unzip -y<br /><br /># If you are using git as &#8220;material&#8221;<br />yum install git -y<br /><br /># The database you are using for your app<br />wget http://dev.mysql.com/get/Downloads/MySQL-5.5/mysql-5.5.28-osx10.6-x86_64.dmg/from/http://cdn.mysql.com/<br /><br /># If your are using Java, download the appropriate version<br />wget http://download.oracle.com/otn-pub/java/jdk/6u37-b06/jdk-6u37-linux-i586-rpm.bin<br /><br /># Get the go server up<br />wget&nbsp;http://www.thoughtworks-studios.com/installer/go-server-1232-jar<br /><br />#Get the go agent<br />wget&nbsp;http://www.thoughtworks-studios.com/installer/go-agent-1232-jar<br /><br />&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br /><br />Once the server and the agent are running (check port 8153) you can use the GUI to set up pipelines. (Or use the config file found under Admin-&gt;Configuration) More on how to set up your pipeline etc can be found in the documentation by clicking on help.<br /><br />Note: Your server must be running in order to access this page.<br /><br /><div>This was just a quick guide to getting started with a CI server. You might have to add more logic to the shell script to customize it to suite the needs of your app.&nbsp;</div><br /><br /><br /><br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Continuous Integration]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/11/19/continuous-integration/"/>
    <updated>2012-11-19T00:00:00-08:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/11/19/continuous-integration</id>
    <content type="html"><![CDATA[<div class='post'>
<br />I was completely new to the concept of&nbsp;continuous integration until my first project at TW. For my earlier projects and in internships, this is how I had approached integration (using git):<br /><br />1. Before I started working on a new story/feature I would create a new branch for the same.<br />2. If more than 1 person is working on the story, then there would be a separate branch for that person under the feature branch. So it would look something like that:<br /><br />&nbsp;Master &#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8211;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; |<br />Search Feature &nbsp; &nbsp; &nbsp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br />&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;|<br />Search_Person_X &nbsp;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;&#8212;<br /><br />3. When the feature is complete, the branches from Person X and Person Y and so on, will be first merged onto the search feature branch and then this will be merged onto the master.<br />4. Thus, merge conflicts, if any, will be resolved when merging in to the master or the major feature branches.<br /><br />The problem with this approach is that, if there is some major defect in the way the code is developed for the feature, there is no way to know that, until the code is merged with the master. That will happen only when the feature is completely developed. Now if the code needs to be removed, that is a lot of effort loss.<br /><br />This is where continuous integration comes to the rescue. Here is how it will work:<br /><br />1. Set-up a continuous integration server. For my first project, we had used <a href="http://www.thoughtworks-studios.com/go-agile-release-management">Go</a>&nbsp;- a ThoughtWorks Studios product.<br />2. This server will poll the Github where the repository for the project exists. The place where the code is checked in, is termed as &#8220;material&#8221;. Depending on what a project uses for version control, the material will change.<br />3. When anyone checks the code into the repo, Go will do certain tasks assigned to it. (Check out next article for go server configuration steps)<br />4. Lets assume that we need the following stages:<br />compile the code, run functional tests and smoke tests and if everything is OK, we can manually deploy the app to the production server.<br />5. All these stages can be automated using a CI server - thus as soon as a new piece of code is pushed, the integration will take place, and a problem if any, will be detected at a much early stage.<br /><br />This is how continuous integration helps build a stable product and could save a lot of time and effort.<br /><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When Can I Skip Refactoring?]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/11/04/when-can-i-skip-refactoring/"/>
    <updated>2012-11-04T00:00:00-07:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/11/04/when-can-i-skip-refactoring</id>
    <content type="html"><![CDATA[<div class='post'>
In my previous post, I wrote about the importance of refactoring. However, there are a few times when it could be avoided:<br /><br /><b>Spiking</b> - A spike is a process in which team members get familiar with a particular technology/requirement that is going to be used in the software development. The code which is written during this process may not be used in the actual production and we can safely skip the refactoring process here. However, if for some reason, the code does get included in the actual production, it is important to go back and refactor it.<br /><br /><b>Prototyping</b> - A prototype is a sample model shown to the client, generally to get feedback on the look and feel of the product before the actual development. The code written for this purpose will not be used and hence is safe to be discarded after the review. Thus, if a piece of code is not going to last a long time and is for experimental process, the refactoring step can be skipped.<br /><br /><b>Continuously</b>&nbsp;<b>changing</b> <b>code</b> - When I interned at a start-up I worked on a piece of &#8216;search&#8217; feature whose requirements changed too frequently. Since it was a startup, the development life cycle of a feature was quite small too. Until the requirements become stable, it is alright not to refactor code which is going to be replaced in anyway.<br /><br />In spite of such special cases, it is important to stress the importance of refactoring so that the development team does not get comfortable to write code without this step. In some situations, refactoring might be essential to the above mentioned scenarios too. Hence every case should be studied against the domain to make the right call.</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring for Those Code Smells]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/11/04/refactoring-for-those-code-smells/"/>
    <updated>2012-11-04T00:00:00-07:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/11/04/refactoring-for-those-code-smells</id>
    <content type="html"><![CDATA[<div class='post'>
Refactoring is a really important step of Test Driven Development. It is the fine line between a working piece of code and production quality code.<br /><br />There are many ways to refactor, however I refer to a list of steps I check for before I dig into the code deeper.&nbsp;To make it more helpful, I am adding the list of shortcuts for carrying out these steps in IntelliJ Idea:<br /><ol><li>Run all tests and make sure they are passing.</li><li>If there are no tests, please write tests before moving ahead.</li><li>Check if a method is very long and break it down to more sensible &amp; readable methods. Remember the 2nd most important rule of a good design is that &#8216;all intentions should be revealed&#8217;. [<b>Option + Command+ M]&nbsp;</b></li><li>Run all tests to make sure they are passing - Check it after every step here after. Go to the test class and use shortcut <b>[Shift + Control +F10]</b></li><li>After the method is broken down, check for duplication of code if any.&nbsp;</li><li>Extract the repeated variables into a parameter of the method. <b>[Option + command+ P]</b></li><li>Find patterns to remove magic numbers in the code. You can extract them as variables using &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<b>[Command + Option + V]</b></li><li>If the methods are using similar logic, extract them to inline methods by using the shortcut <b>[Opt + Cmd + N]&nbsp;</b></li><li>We can organize the methods such that the private methods will appear before the public methods. <b>[Cursor in the method + Command + Shift + Arrow Up/Down]</b></li></ol><div>Once all these are checked for, dig deeper into the logic of the code. Pointers to what can be checked:&nbsp;</div><div><br /></div><div>1. Feature Envy - When a method(s) in one class uses most of the information from other class. This means that the function would rather be delegated to the other class. Use option 3 to extract the method. However if the method does not logically fit into the other class as well, then extract it to a new class.&nbsp;</div><div><br /></div><div>2. To remove code duplication, check if it can be fixed by using enumerations or creating new classes that will abstract the logic more appropriately.<br /><br /></div><br /></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD and What It Means to Me]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/10/17/tdd-and-what-it-means-to-me/"/>
    <updated>2012-10-17T00:00:00-07:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/10/17/tdd-and-what-it-means-to-me</id>
    <content type="html"><![CDATA[<div class='post'>
My first brush with Test Driven Development (TDD) methodology is at ThoughtWorks Inc. It is my first job out of school and I&#8217;ve never really written production quality code; as a result TDD came as a bit of a shock to me.<br /><br />Let me first explain what TDD means to me:<br /><br /><ul><li>It is a software dev method where in you ALWAYS write a test before you write any code to support it.&nbsp;</li><li>It follows a simple 3 step process called Red-Green-Refactor:</li></ul><ol><ol><li>Red - Write the test for your first requirement. Do the necessary changes for it to compile. Run it and let it fail. (Yes, let it.)</li><li>Green - Make the minimum number of changes for the test to pass.&nbsp;</li><li>Refactor - Now work on your code for it to pass all possible scenarios (not just the test cases you have, though you should have a test case for each type of a scenario) and make it production quality. And now deploy!</li></ol></ol><ul><li>Thus you just do not have any code that does not have tests to support it.&nbsp;</li></ul><div><br /></div><div>At first, I thought it was just a mechanism to enforce tests for a code.. then why is it different from writing tests after writing code?&nbsp;</div><div><br /></div><div>To answer this I wrote 2 programs - one where I followed TDD and one where I used the&nbsp;traditional&nbsp;old school approach for the same story. Here is what I observed:&nbsp;</div><div><ul><li>With TDD: The tests looked a LOT cleaner as I did not have any sort of logic within it. They had no information of the logic within the code and hence made the tests more robust.&nbsp;</li><li>With Traditional Approach: The tests were&nbsp;susceptible&nbsp;to breakage as any change in the code would mean I would need to change the tests too. The tests were written after the code and hence had to support the code whilst knowing what the control flow in the program is.</li></ul><div><br /></div>And yes, reading about it (or even writing) does not justify how awesome it is to use TDD. Like me, you will find your answers when you &#8216;just try!&#8217;<br /></div><div><br /></div><div>Tip: I am person who needs all the cards open in front before I can make any decision. Hence, it was difficult to visualize the code I am writing tests for. To overcome this problem, I have started writing little bits of code in my tests it self. Once the tests pass, I can transfer the code/logic over to the source files and the tests will remain as clean as they are meant to be. &nbsp;</div><div><br /></div><div>PS: I am so used to TDD now that when I need to see someones program, I look at the tests before looking at the code! #Woohoo</div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Really Simple Rules for a Great Design]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/10/15/the-really-simple-rules-for-great-design/"/>
    <updated>2012-10-15T00:00:00-07:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/10/15/the-really-simple-rules-for-great-design</id>
    <content type="html"><![CDATA[<div class='post'>
If you look up the word &#8216;Developer&#8217; it says : One who programs computers to match the requirements of a given problem. I used to perfectly fit into this definition until I learnt the simple rules of design.<br /><div><br /></div><div>I have never been an artistic person but now I have a compulsive need for my code to look beautiful. I have started abiding by these set of rules and the code looks better, is easier to understand and the best part is it is so freaking &#8216;simple&#8217;! <br /><div></div><div>For every little program you write just go over <b>these simple rules</b>:&nbsp;</div><div><br /></div><div><b>It should pass all tests </b>- This is to make sure your program does what its supposed to. (If you don&#8217;t have any tests, Stop reading further - Run to your computer write some tests and I&#8217;ll see you in a bit)&nbsp;</div><div><br /></div><div><b>It should reveal all intentions</b> - Does your add method do exactly (and only) that? Add?&nbsp;</div><div><br /></div><div><b>No duplication</b> - Extract common statements into methods, use setup() for test cases : do what it takes.&nbsp;</div><div><br /></div><div><b>Fewest number of classes and methods</b> - I closely relate this to another rule &#8220;YAGNI&#8221; an acronym for &#8216;You aren&#8217;t gonna need it&#8217;. Cluttering the code with far too many classes will make it difficult to maintain.&nbsp;</div><div><br /></div><div>This list is not exhaustive and good design is a far lengthy topic of discussion but if you have these 4 check boxes ticked and you write decent code it will be a great step 1 to having a robust design for your application.&nbsp;</div></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Passion Begins]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/10/14/the-passion-begins/"/>
    <updated>2012-10-14T00:00:00-07:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/10/14/the-passion-begins</id>
    <content type="html"><![CDATA[<div class='post'>
<br /><div class="p1">TWU continued on to week 2 and I joined the bootcamp for developers. I met other trainers - Nigel, Amir, Alok (Luka/Heroku) :) and I realized as the time passed that all TWers have one thing in common : They are awesomely&nbsp;brilliant!&nbsp;</div><div class="p2"><br /></div><div class="p1">Yeah, it was intimidating.. My first internship I had a feeling (yes, it was true :P) that I was smarter than most people over there. For some it might be a great feeling, but for me I knew something was&nbsp;missing - the drive to excel.&nbsp;</div><div class="p2"><br /></div><div class="p1">At TW all the people around me are extraordinary - not because they come from best of the schools or&nbsp;achieved&nbsp;top grades - it was because they are extremely passionate about what they are doing.&nbsp;They are passionate about writing good code, about technology and about having serious fun :D&nbsp;</div><div class="p1"><br /></div><table cellpadding="0" cellspacing="0" class="tr-caption-container" style="float: left; text-align: center;"><tbody><tr><td style="text-align: center;"><a href="https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-ash4/400798_10152203731790438_1106490818_n.jpg" imageanchor="1" style="margin-left: auto; margin-right: auto;"><img border="0" height="240" src="https://fbcdn-sphotos-c-a.akamaihd.net/hphotos-ak-ash4/400798_10152203731790438_1106490818_n.jpg" width="320" /></a></td></tr><tr><td class="tr-caption" style="text-align: center;"><span style="font-size: xx-small;">Bowling Night</span></td></tr></tbody></table><div class="p1">And they&#8217;ve passed it onto me - without much of an effort - I just know that I have never been as passionate about CS as I am now. How glad am I that I did choose TW eventually!&nbsp;</div><div class="p1"><br /></div><div class="p1">To quantify my passion - I am, for the first time ever, annoyed that it is a weekend! Oh weekday hope thy never end! :)&nbsp;</div><div class="p1"><br /></div><div class="p1">Yes, I&#8217;ve used &#8216;passion&#8217; more times than is even allowed by&nbsp;Repetitio,&nbsp;but well what was the post again?&nbsp;</div><div class="p1"><br /></div><div class="p1"><br /></div><div class="p1"><br /></div><div class="p1"><br /></div></div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Mantra (Boredom = Null)]]></title>
    <link href="http://Sannidhi.github.io/blog/2012/10/14/my-first-mantra/"/>
    <updated>2012-10-14T00:00:00-07:00</updated>
    <id>http://Sannidhi.github.io/blog/2012/10/14/my-first-mantra</id>
    <content type="html"><![CDATA[<div class='post'>
<div><i>(Dear Blog: You are my first, be forgiving!)&nbsp;</i></div><div></div>After a lot of discussion with family, friends and many more with myself, I had decided to take up the offer at ThoughtWorks Inc. (My First Job! Fingers crossed! :)) I had to attend a mandatory training &#8220;TWU&#8221; for 6 weeks in Bangalore, India that meant going away from my fiance (<i>cry</i>).<br /><div><br /></div><div>Fast forward the long flight and here I was - India! :( :) &nbsp;</div><div><br /></div><div class="separator" style="clear: both; text-align: center;"><a href="http://farm8.staticflickr.com/7232/7053327229_39e9f6b8d6_m.jpg" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" height="213" src="http://farm8.staticflickr.com/7232/7053327229_39e9f6b8d6_m.jpg" width="320" /></a></div><div class="separator" style="clear: both; text-align: center;"><span style="font-size: xx-small;">Courtesy: flickr/andrewkjones</span></div><div class="separator" style="clear: both; text-align: center;"><br /></div><div>The first day, Fri Oct 5, 2012, I met so many people who had come from all over the world - Australia, China, India, South Africa, UK, USA! We played a few games - mind ball game and treasure hunting - I got to interact with many of the other TWU&#8217;ers. It was cool :) &nbsp;</div><div class="separator" style="clear: both; text-align: center;"><br /></div><div>My introductory one-on-one with my coach Scott and I learnt my first important lesson:&nbsp;</div><div><b><br /></b></div><div><b>Never get bored&nbsp;</b></div><div><b><br /></b></div><div>There are infinite things you can do in your lifetime (play, read, jog, code..) and if you are getting bored - well how does that happen again?&nbsp;</div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div></div></div>
]]></content>
  </entry>
  
</feed>
